<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ST Bot Dashboard - Live</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 30px;
            text-align: center;
            margin-bottom: 30px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
        }

        .header h1 {
            color: #667eea;
            font-size: 2.5rem;
            margin-bottom: 10px;
        }

        .status-indicator {
            display: inline-flex;
            align-items: center;
            background: #10b981;
            color: white;
            padding: 8px 16px;
            border-radius: 20px;
            font-size: 0.9rem;
            font-weight: 500;
            transition: all 0.3s ease;
        }

        .status-indicator.disconnected {
            background: #ef4444;
        }

        .status-indicator.reconnecting {
            background: #f59e0b;
        }

        .status-dot {
            width: 8px;
            height: 8px;
            background: white;
            border-radius: 50%;
            margin-right: 8px;
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.5; }
        }

        .live-time {
            font-size: 1.5rem;
            color: #667eea;
            font-weight: 600;
            margin: 15px 0;
            font-family: 'Courier New', monospace;
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 25px;
            margin-bottom: 30px;
        }

        .stat-card {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 25px;
            text-align: center;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .stat-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 40px rgba(0, 0, 0, 0.15);
        }

        .stat-card.updating::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 2px;
            background: linear-gradient(90deg, transparent, #667eea, transparent);
            animation: slide 1s infinite;
        }

        @keyframes slide {
            0% { left: -100%; }
            100% { left: 100%; }
        }

        .stat-value {
            font-size: 2.5rem;
            font-weight: bold;
            color: #667eea;
            margin-bottom: 10px;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 10px;
            transition: all 0.3s ease;
        }

        .stat-label {
            color: #666;
            font-size: 1rem;
            font-weight: 500;
        }

        .controls {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 25px;
            text-align: center;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            margin-bottom: 30px;
        }

        .controls h3 {
            color: #667eea;
            margin-bottom: 20px;
        }

        .btn {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 25px;
            cursor: pointer;
            font-size: 1rem;
            font-weight: 500;
            margin: 0 10px;
            transition: all 0.3s ease;
            text-decoration: none;
            display: inline-block;
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        }

        .btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }

        .btn-danger {
            background: linear-gradient(135deg, #ff6b6b 0%, #ee5a52 100%);
        }

        .info-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
            gap: 25px;
            margin-bottom: 30px;
        }

        .info-card {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
        }

        .info-card h3 {
            color: #667eea;
            font-size: 1.4rem;
            margin-bottom: 20px;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .info-table {
            width: 100%;
        }

        .info-table tr {
            border-bottom: 1px solid #eee;
        }

        .info-table td {
            padding: 12px 0;
            vertical-align: top;
        }

        .info-table td:first-child {
            font-weight: 600;
            color: #555;
            width: 40%;
        }

        .info-table td:last-child {
            color: #333;
        }

        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            background: #10b981;
            color: white;
            padding: 15px 20px;
            border-radius: 10px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
            transform: translateX(400px);
            transition: transform 0.3s ease;
            z-index: 1000;
        }

        .notification.show {
            transform: translateX(0);
        }

        .notification.error {
            background: #ef4444;
        }

        .modal {
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            backdrop-filter: blur(5px);
        }

        .modal-content {
            background: white;
            margin: 5% auto;
            padding: 0;
            border-radius: 15px;
            width: 80%;
            max-width: 800px;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
            animation: modalSlideIn 0.3s ease;
        }

        @keyframes modalSlideIn {
            from { transform: translateY(-50px); opacity: 0; }
            to { transform: translateY(0); opacity: 1; }
        }

        .modal-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 20px 30px;
            border-radius: 15px 15px 0 0;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .modal-header h3 {
            margin: 0;
            color: white;
        }

        .close {
            color: white;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
            transition: opacity 0.3s ease;
        }

        .close:hover {
            opacity: 0.7;
        }

        .modal-body {
            padding: 30px;
        }

        .modal-body textarea {
            width: 100%;
            min-height: 200px;
            padding: 15px;
            border: 2px solid #e0e0e0;
            border-radius: 10px;
            font-family: 'Courier New', monospace;
            font-size: 14px;
            resize: vertical;
            outline: none;
            transition: border-color 0.3s ease;
        }

        .modal-body textarea:focus {
            border-color: #667eea;
        }

        .modal-actions {
            margin-top: 20px;
            text-align: center;
        }

        .modal-actions .btn {
            margin: 0 10px;
        }

        @media (max-width: 768px) {
            .info-grid {
                grid-template-columns: 1fr;
            }

            .header h1 {
                font-size: 2rem;
            }

            .stat-value {
                font-size: 2rem;
            }

            .btn {
                margin: 5px;
                padding: 10px 20px;
            }

            .modal-content {
                width: 95%;
                margin: 10% auto;
            }

            .modal-body {
                padding: 20px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>🤖 ST Bot Dashboard</h1>
            <p>Live Real-time Bot Management</p>
            <div class="status-indicator" id="connectionStatus">
                <div class="status-dot"></div>
                <span id="statusText">Connecting...</span>
            </div>
            <div class="live-time" id="liveTime"></div>
        </div>

        <div class="stats-grid">
            <div class="stat-card" id="usersCard">
                <div class="stat-value">
                    <span>👥</span>
                    <span id="totalUsers"><%= it.botInfo.totalUsers %></span>
                </div>
                <div class="stat-label">Total Users</div>
            </div>
            <div class="stat-card" id="threadsCard">
                <div class="stat-value">
                    <span>💬</span>
                    <span id="totalThreads"><%= it.botInfo.totalThreads %></span>
                </div>
                <div class="stat-label">Total Threads</div>
            </div>
            <div class="stat-card" id="uptimeCard">
                <div class="stat-value">
                    <span>⏱️</span>
                    <span id="uptime"><%= it.systemInfo.uptime %></span>
                </div>
                <div class="stat-label">Uptime</div>
            </div>
            <div class="stat-card" id="memoryCard">
                <div class="stat-value">
                    <span>🧠</span>
                    <span id="memoryUsage"><%= it.systemInfo.memoryUsed %></span>
                </div>
                <div class="stat-label">Memory Usage</div>
            </div>
        </div>

        <div class="controls">
            <h3>⚡ Quick Actions</h3>
            <button class="btn btn-danger" onclick="restartBot()" id="restartBtn">🔄 Restart Bot</button>
            <button class="btn" onclick="updateBot()" id="updateBtn">📥 Update Bot</button>
            <button class="btn" onclick="showCookieModal()" id="cookieBtn">🍪 Manage Cookies</button>
            <button class="btn" onclick="showConfigModal()" id="configBtn">⚙️ Bot Config</button>
        </div>

        <!-- Cookie Management Modal -->
        <div id="cookieModal" class="modal" style="display: none;">
            <div class="modal-content">
                <div class="modal-header">
                    <h3>🍪 Facebook Cookie Management</h3>
                    <span class="close" onclick="hideCookieModal()">&times;</span>
                </div>
                <div class="modal-body">
                    <textarea id="cookieData" placeholder="Paste your Facebook cookies here (JSON format)..." rows="10"></textarea>
                    <div class="modal-actions">
                        <button class="btn" onclick="loadCookies()">📥 Load Current</button>
                        <button class="btn btn-danger" onclick="saveCookies()">💾 Save Changes</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Config Management Modal -->
        <div id="configModal" class="modal" style="display: none;">
            <div class="modal-content">
                <div class="modal-header">
                    <h3>⚙️ Bot Configuration</h3>
                    <span class="close" onclick="hideConfigModal()">&times;</span>
                </div>
                <div class="modal-body">
                    <textarea id="configData" placeholder="Bot configuration (JSON format)..." rows="15"></textarea>
                    <div class="modal-actions">
                        <button class="btn" onclick="loadConfig()">📥 Load Current</button>
                        <button class="btn btn-danger" onclick="saveConfig()">💾 Save Changes</button>
                    </div>
                </div>
            </div>
        </div>

        <div class="info-grid">
            <div class="info-card">
                <h3>🤖 Bot Information</h3>
                <table class="info-table">
                    <tr>
                        <td>Bot ID:</td>
                        <td><%= it.botInfo.botID %></td>
                    </tr>
                    <tr>
                        <td>Prefix:</td>
                        <td><code><%= it.botInfo.prefix %></code></td>
                    </tr>
                    <tr>
                        <td>Language:</td>
                        <td><%= it.botInfo.language %></td>
                    </tr>
                    <tr>
                        <td>Nickname:</td>
                        <td><%= it.botInfo.nickname %></td>
                    </tr>
                    <tr>
                        <td>Version:</td>
                        <td><%= it.botInfo.version %></td>
                    </tr>
                </table>
            </div>

            <div class="info-card">
                <h3>💻 System Information</h3>
                <table class="info-table">
                    <tr>
                        <td>Platform:</td>
                        <td><%= it.systemInfo.platform %></td>
                    </tr>
                    <tr>
                        <td>Architecture:</td>
                        <td><%= it.systemInfo.arch %></td>
                    </tr>
                    <tr>
                        <td>Node Version:</td>
                        <td><%= it.systemInfo.nodeVersion %></td>
                    </tr>
                    <tr>
                        <td>CPU Cores:</td>
                        <td><%= it.systemInfo.cpus %></td>
                    </tr>
                    <tr>
                        <td>Total Memory:</td>
                        <td><%= it.systemInfo.totalMemory %></td>
                    </tr>
                    <tr>
                        <td>Free Memory:</td>
                        <td><%= it.systemInfo.freeMemory %></td>
                    </tr>
                </table>
            </div>
        </div>
    </div>

    <div class="notification" id="notification"></div>

    <script>
        let ws = null;
        let reconnectAttempts = 0;
        const maxReconnectAttempts = 5;

        // Elements
        const connectionStatus = document.getElementById('connectionStatus');
        const statusText = document.getElementById('statusText');
        const liveTime = document.getElementById('liveTime');
        const notification = document.getElementById('notification');

        // Update live time every second
        function updateLiveTime() {
            const now = new Date();
            const timeString = now.toLocaleString('en-US', {
                weekday: 'short',
                year: 'numeric',
                month: 'short',
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit',
                second: '2-digit',
                hour12: false
            });
            if (liveTime) {
                liveTime.textContent = timeString;
            }
        }

        // Show notification
        function showNotification(message, isError = false) {
            notification.textContent = message;
            notification.className = `notification ${isError ? 'error' : ''} show`;
            setTimeout(() => {
                notification.classList.remove('show');
            }, 3000);
        }

        // Update stat with animation
        function updateStat(elementId, newValue) {
            const element = document.getElementById(elementId);
            if (!element) return;
            
            const card = element.closest('.stat-card');
            const currentValue = element.textContent;

            if (currentValue !== newValue.toString()) {
                if (card) card.classList.add('updating');
                element.style.transform = 'scale(1.1)';
                element.style.transition = 'transform 0.2s ease';
                element.textContent = newValue;

                setTimeout(() => {
                    element.style.transform = 'scale(1)';
                    if (card) card.classList.remove('updating');
                }, 300);
            }
        }

        // Cookie management functions
        function showCookieModal() {
            document.getElementById('cookieModal').style.display = 'block';
            loadCookies();
        }

        function hideCookieModal() {
            document.getElementById('cookieModal').style.display = 'none';
        }

        async function loadCookies() {
            try {
                const response = await fetch('/api/cookies');
                const data = await response.json();

                if (data.success) {
                    document.getElementById('cookieData').value = data.cookies;
                    showNotification('Cookies loaded successfully');
                } else {
                    showNotification('Failed to load cookies: ' + data.message, true);
                }
            } catch (error) {
                showNotification('Error loading cookies: ' + error.message, true);
            }
        }

        async function saveCookies() {
            const cookies = document.getElementById('cookieData').value;

            if (!cookies.trim()) {
                showNotification('Please enter cookie data', true);
                return;
            }

            try {
                const response = await fetch('/api/cookies', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ cookies })
                });

                const data = await response.json();

                if (data.success) {
                    showNotification('Cookies saved successfully');
                    hideCookieModal();
                } else {
                    showNotification('Failed to save cookies: ' + data.message, true);
                }
            } catch (error) {
                showNotification('Error saving cookies: ' + error.message, true);
            }
        }

        // Config management functions
        function showConfigModal() {
            document.getElementById('configModal').style.display = 'block';
            loadConfig();
        }

        function hideConfigModal() {
            document.getElementById('configModal').style.display = 'none';
        }

        async function loadConfig() {
            try {
                const response = await fetch('/api/config');
                const data = await response.json();

                if (data.success) {
                    document.getElementById('configData').value = JSON.stringify(data.config, null, 2);
                    showNotification('Configuration loaded successfully');
                } else {
                    showNotification('Failed to load config: ' + data.message, true);
                }
            } catch (error) {
                showNotification('Error loading config: ' + error.message, true);
            }
        }

        async function saveConfig() {
            const configText = document.getElementById('configData').value;

            if (!configText.trim()) {
                showNotification('Please enter configuration data', true);
                return;
            }

            try {
                const config = JSON.parse(configText);

                const response = await fetch('/api/config', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ config })
                });

                const data = await response.json();

                if (data.success) {
                    showNotification('Configuration saved successfully');
                    hideConfigModal();
                } else {
                    showNotification('Failed to save config: ' + data.message, true);
                }
            } catch (error) {
                showNotification('Error saving config: ' + error.message, true);
            }
        }

        // Update bot function
        async function updateBot() {
            if (!confirm('This will update the bot from GitHub. Continue?')) {
                return;
            }

            const updateBtn = document.getElementById('updateBtn');
            updateBtn.disabled = true;
            updateBtn.textContent = '📥 Updating...';

            try {
                const response = await fetch('/api/update', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' }
                });

                const data = await response.json();

                if (data.success) {
                    showNotification('Bot update initiated. Restarting...');
                } else {
                    showNotification('Failed to update bot: ' + data.message, true);
                }
            } catch (error) {
                showNotification('Error updating bot: ' + error.message, true);
            } finally {
                setTimeout(() => {
                    updateBtn.disabled = false;
                    updateBtn.textContent = '📥 Update Bot';
                }, 5000);
            }
        }

        // WebSocket connection
        function connectWebSocket() {
            const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
            const wsUrl = `${protocol}//${window.location.host}/ws`;

            try {
                ws = new WebSocket(wsUrl);

                ws.onopen = function() {
                    console.log('WebSocket connected');
                    connectionStatus.classList.remove('disconnected');
                    statusText.textContent = 'Live & Connected';
                    reconnectAttempts = 0;
                    showNotification('Connected to live data stream');
                };

                ws.onmessage = function(event) {
                    try {
                        const data = JSON.parse(event.data);

                        if (data.type === 'stats') {
                            updateStat('totalUsers', data.totalUsers || 0);
                            updateStat('totalThreads', data.totalThreads || 0);
                            updateStat('uptime', data.uptime || 'Unknown');
                            updateStat('memoryUsage', data.memoryUsage || 'Unknown');
                        }
                    } catch (error) {
                        console.error('Error parsing WebSocket message:', error);
                    }
                };

                ws.onclose = function(event) {
                    console.log('WebSocket disconnected:', event.code, event.reason);
                    connectionStatus.classList.add('disconnected');
                    statusText.textContent = 'Reconnecting...';

                    if (reconnectAttempts < maxReconnectAttempts) {
                        reconnectAttempts++;
                        const delay = Math.min(1000 * Math.pow(2, reconnectAttempts), 10000);
                        setTimeout(() => {
                            console.log(`Reconnecting... (${reconnectAttempts}/${maxReconnectAttempts})`);
                            connectWebSocket();
                        }, delay);
                    } else {
                        statusText.textContent = 'Connection Failed';
                        showNotification('Connection lost. Please refresh the page.', true);
                    }
                };

                ws.onerror = function(error) {
                    console.error('WebSocket error:', error);
                    showNotification('Connection error occurred', true);
                };

            } catch (error) {
                console.error('Failed to create WebSocket:', error);
                // Fallback to regular API calls
                setInterval(fetchStats, 2000);
            }
        }

        // Fallback API fetch with improved stats
        async function fetchStats() {
            try {
                const response = await fetch('/api/system');
                const data = await response.json();

                if (data.success) {
                    updateStat('totalUsers', data.totalUsers || 0);
                    updateStat('totalThreads', data.totalThreads || 0);
                    updateStat('uptime', data.uptime || 'Unknown');
                    updateStat('memoryUsage', data.memoryUsed || 'Unknown');
                }
            } catch (error) {
                console.error('Error fetching stats:', error);
            }
        }

        // Restart bot function
        async function restartBot() {
            if (!confirm('Are you sure you want to restart the bot?')) {
                return;
            }

            const restartBtn = document.getElementById('restartBtn');
            restartBtn.disabled = true;
            restartBtn.textContent = '🔄 Restarting...';

            try {
                const response = await fetch('/api/restart', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' }
                });

                const data = await response.json();

                if (data.success) {
                    showNotification('Bot is restarting...');
                } else {
                    showNotification('Failed to restart bot: ' + data.message, true);
                }
            } catch (error) {
                showNotification('Error restarting bot: ' + error.message, true);
            } finally {
                setTimeout(() => {
                    restartBtn.disabled = false;
                    restartBtn.textContent = '🔄 Restart Bot';
                }, 5000);
            }
        }

        // Initialize dashboard
        function init() {
            // Start live time updates immediately
            updateLiveTime();
            const timeInterval = setInterval(updateLiveTime, 1000);

            // Connect WebSocket for real-time data
            connectWebSocket();

            // Fallback: Also poll API every 5 seconds as backup
            const fallbackInterval = setInterval(() => {
                if (!ws || ws.readyState !== WebSocket.OPEN) {
                    fetchStats();
                }
            }, 5000);

            console.log('Live dashboard initialized with WebSocket connection');

            // Cleanup function
            window.dashboardCleanup = () => {
                clearInterval(timeInterval);
                clearInterval(fallbackInterval);
                if (ws) {
                    ws.close();
                }
            };
        }

        // Cleanup on page unload
        window.addEventListener('beforeunload', () => {
            if (ws) {
                ws.close();
            }
        });

        // Start when page loads
        document.addEventListener('DOMContentLoaded', init);
    </script>
</body>
</html>