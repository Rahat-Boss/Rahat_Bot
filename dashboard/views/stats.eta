
<%~ includeFile("partials/header", {
	user: user
}); %>
<%~ includeFile("partials/message.eta"); %>
<%~ includeFile("partials/title.eta", {
	icon: "fas fa-chart-bar",
	title: "Bot Statistics - Live Dashboard"
}); %>

<section class="post my-4">
  <div class="container">
    <div class="row">
      <div class="col-12">
        <div class="card shadow-sm">
          <div class="card-header bg-primary text-white">
            <h5 class="mb-0"><i class="fas fa-tachometer-alt"></i> Real-time Bot Statistics</h5>
            <small>Live updates every second - <span id="liveIndicator">üü¢ LIVE</span></small>
          </div>
          <div class="card-body">
            <div class="table-responsive">
              <table class="table table-hover">
                <tbody>
                  <tr>
                    <td><i class="fas fa-users text-primary"></i> <strong>Total Users</strong></td>
                    <td><span id="totalUsers" class="badge bg-info fs-6"><%= totalUser %></span></td>
                  </tr>
                  <tr>
                    <td><i class="fas fa-comments text-success"></i> <strong>Total Threads</strong></td>
                    <td><span id="totalThreads" class="badge bg-success fs-6"><%= totalThread %></span></td>
                  </tr>
                  <tr>
                    <td><i class="fas fa-hashtag text-warning"></i> <strong>Bot Prefix</strong></td>
                    <td><code id="botPrefix"><%= prefix %></code></td>
                  </tr>
                  <tr>
                    <td><i class="fas fa-clock text-info"></i> <strong>Uptime</strong></td>
                    <td><span id="uptime" class="text-primary fw-bold"><%= uptime %></span></td>
                  </tr>
                  <tr>
                    <td><i class="fab fa-node-js text-success"></i> <strong>Node.js Version</strong></td>
                    <td><code><%= process.version %></code></td>
                  </tr>
                  <tr>
                    <td><i class="fas fa-memory text-danger"></i> <strong>Memory Usage</strong></td>
                    <td><span id="memoryUsage" class="badge bg-danger fs-6"><%= (process.memoryUsage().rss / 1024 / 1024).toFixed(2) %> MB</span></td>
                  </tr>
                  <tr>
                    <td><i class="fas fa-microchip text-warning"></i> <strong>System CPU</strong></td>
                    <td><span id="systemCpu" class="badge bg-warning fs-6"><%= (process.cpuUsage().system / 1024 / 1024).toFixed(2) %>%</span></td>
                  </tr>
                  <tr>
                    <td><i class="fas fa-server text-info"></i> <strong>Node CPU</strong></td>
                    <td><span id="nodeCpu" class="badge bg-info fs-6"><%= (process.cpuUsage().user / 1024 / 1024).toFixed(2) %>%</span></td>
                  </tr>
                  <tr>
                    <td><i class="fas fa-circle text-success"></i> <strong>Bot Status</strong></td>
                    <td><span id="botStatus" class="badge bg-success fs-6">Online</span></td>
                  </tr>
                  <tr>
                    <td><i class="fas fa-sync-alt"></i> <strong>Updates</strong></td>
                    <td><span id="updateCounter" class="badge bg-secondary fs-6">0</span></td>
                  </tr>
                </tbody>
              </table>
            </div>
          </div>
          <div class="card-footer text-muted">
            <small>
              <i class="fas fa-circle text-success blink"></i> 
              Live updating every second | 
              Last update: <span id="lastUpdated">Just now</span>
            </small>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

<style>
  .card {
    border: none;
    border-radius: 10px;
  }
  .table td {
    border: none;
    padding: 15px;
  }
  .table tr:hover {
    background-color: rgba(0,123,255,0.1);
  }
  .badge {
    font-size: 0.9em !important;
  }
  .blink {
    animation: blink 1s infinite;
  }
  @keyframes blink {
    0%, 50% { opacity: 1; }
    51%, 100% { opacity: 0.3; }
  }
  .pulse-update {
    animation: pulse-update 0.5s ease-in-out;
  }
  @keyframes pulse-update {
    0% { transform: scale(1); background-color: rgba(40, 167, 69, 0.1); }
    50% { transform: scale(1.05); background-color: rgba(40, 167, 69, 0.3); }
    100% { transform: scale(1); background-color: transparent; }
  }
  #liveIndicator {
    animation: live-pulse 2s infinite;
    font-weight: bold;
  }
  @keyframes live-pulse {
    0% { color: #28a745; }
    50% { color: #20c997; }
    100% { color: #28a745; }
  }
</style>

<script type="text/javascript">
  // Time conversion function for uptime
  function formatUptime(seconds) {
    const days = Math.floor(seconds / 86400);
    const hours = Math.floor((seconds % 86400) / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    const secs = Math.floor(seconds % 60);
    
    let result = '';
    if (days > 0) result += days + ' ng√†y ';
    if (hours > 0) result += hours + ' gi·ªù ';
    if (minutes > 0) result += minutes + ' ph√∫t ';
    result += secs + ' gi√¢y';
    
    return result;
  }
  
  // Initialize variables
  let uptimeSeconds = Number("<%=uptimeSecond%>") || 0;
  let updateCount = 0;
  let isOnline = true;
  
  // Elements
  const elements = {
    uptime: document.getElementById('uptime'),
    totalUsers: document.getElementById('totalUsers'),
    totalThreads: document.getElementById('totalThreads'),
    memoryUsage: document.getElementById('memoryUsage'),
    systemCpu: document.getElementById('systemCpu'),
    nodeCpu: document.getElementById('nodeCpu'),
    botStatus: document.getElementById('botStatus'),
    updateCounter: document.getElementById('updateCounter'),
    lastUpdated: document.getElementById('lastUpdated'),
    liveIndicator: document.getElementById('liveIndicator')
  };
  
  // Function to add pulse animation
  function addPulseAnimation(element) {
    element.classList.add('pulse-update');
    setTimeout(() => {
      element.classList.remove('pulse-update');
    }, 500);
  }
  
  // Function to update stats
  async function updateStats() {
    try {
      const response = await fetch('/api/stats', {
        method: 'GET',
        headers: {
          'Cache-Control': 'no-cache',
          'Pragma': 'no-cache'
        }
      });
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}`);
      }
      
      const data = await response.json();
      
      if (data.success !== false) {
        // Update users
        if (elements.totalUsers.textContent !== String(data.totalUser)) {
          elements.totalUsers.textContent = data.totalUser || 0;
          addPulseAnimation(elements.totalUsers);
        }
        
        // Update threads
        if (elements.totalThreads.textContent !== String(data.totalThread)) {
          elements.totalThreads.textContent = data.totalThread || 0;
          addPulseAnimation(elements.totalThreads);
        }
        
        // Update memory
        const memoryText = (data.memory || 0) + ' MB';
        if (elements.memoryUsage.textContent !== memoryText) {
          elements.memoryUsage.textContent = memoryText;
          addPulseAnimation(elements.memoryUsage);
        }
        
        // Update CPU
        const cpuText = (data.cpu || 0) + '%';
        if (elements.systemCpu.textContent !== cpuText) {
          elements.systemCpu.textContent = cpuText;
          addPulseAnimation(elements.systemCpu);
        }
        
        // Update Node CPU
        const nodeCpuText = (data.nodeCpu || 0) + '%';
        if (elements.nodeCpu.textContent !== nodeCpuText) {
          elements.nodeCpu.textContent = nodeCpuText;
          addPulseAnimation(elements.nodeCpu);
        }
        
        // Update bot status
        const status = data.botStatus === 'Online' ? 'Online' : 'Offline';
        if (elements.botStatus.textContent !== status) {
          elements.botStatus.textContent = status;
          elements.botStatus.className = status === 'Online' ? 
            'badge bg-success fs-6' : 'badge bg-danger fs-6';
          addPulseAnimation(elements.botStatus);
        }
        
        // Update connection status
        if (!isOnline) {
          isOnline = true;
          elements.liveIndicator.textContent = 'üü¢ LIVE';
          elements.liveIndicator.style.color = '#28a745';
        }
      }
      
      // Update counter and timestamp
      updateCount++;
      elements.updateCounter.textContent = updateCount;
      elements.lastUpdated.textContent = new Date().toLocaleTimeString();
      
    } catch (error) {
      console.error('Stats update failed:', error.message);
      
      // Update connection status
      if (isOnline) {
        isOnline = false;
        elements.liveIndicator.textContent = 'üî¥ ERROR';
        elements.liveIndicator.style.color = '#dc3545';
      }
    }
  }
  
  // Update uptime every second
  function updateUptime() {
    uptimeSeconds++;
    elements.uptime.textContent = formatUptime(uptimeSeconds);
  }
  
  // Start real-time updates
  console.log('üöÄ Starting real-time dashboard...');
  
  // Update uptime every second
  setInterval(updateUptime, 1000);
  
  // Update stats every second for real-time effect
  setInterval(updateStats, 1000);
  
  // Initial stats update
  updateStats();
  
  // Handle page visibility
  document.addEventListener('visibilitychange', function() {
    if (document.hidden) {
      elements.liveIndicator.textContent = '‚è∏Ô∏è PAUSED';
      elements.liveIndicator.style.color = '#6c757d';
    } else {
      elements.liveIndicator.textContent = 'üü¢ LIVE';
      elements.liveIndicator.style.color = '#28a745';
      updateStats(); // Immediate update when page becomes visible
    }
  });
  
  // Handle online/offline
  window.addEventListener('online', function() {
    elements.liveIndicator.textContent = 'üü¢ LIVE';
    elements.liveIndicator.style.color = '#28a745';
    updateStats();
  });
  
  window.addEventListener('offline', function() {
    elements.liveIndicator.textContent = 'üî¥ OFFLINE';
    elements.liveIndicator.style.color = '#dc3545';
  });
  
  console.log('‚úÖ Real-time dashboard initialized - Updates every 1 second');
</script>

<%~ includeFile("partials/footer") %>
