const fs = require("fs");
const path = require("path");

function findFileRecursive(dir, filename) {
  const files = fs.readdirSync(dir);
  for (const file of files) {
    const fullPath = path.join(dir, file);
    const stat = fs.statSync(fullPath);
    if (stat.isDirectory()) {
      const found = findFileRecursive(fullPath, filename);
      if (found) return found;
    } else if (file.toLowerCase() === filename.toLowerCase()) {
      return fullPath;
    }
  }
  return null;
}

module.exports = {
  config: {
    name: "Khanki",
    aliases: [],
    version: "3.0",
    author: "ЁЯФ░ЁЭЧеЁЭЧоЁЭЧ╡ЁЭЧоЁЭШБ_ЁЭЧХЁЭЧ╝ЁЭШБЁЯФ░",
    countDown: 5,
    role: 2,
    shortDescription: "ржЕржбрж┐ржУ ржкрж╛ржарж╛ржмрзЗ",
    longDescription: "!Khanki @user '",
    category: "fun",
    guide: {
      en: "{pn} @mention"
    }
  },

  onStart: async function ({ api, event, args, Users }) {
    if (!event.mentions || Object.keys(event.mentions).length === 0) {
      return api.sendMessage("ржХрж╛рж░рзЛ ржорзЗржирж╢ржи ржХрж░рзЛ ЁЭЧеЁЭЧоЁЭЧ╡ЁЭЧоЁЭШБ Boss ЁЯЩВ", event.threadID, event.messageID);
    }

    try {
      const mentionID = Object.keys(event.mentions)[0];
      const mentionName = event.mentions[mentionID] || (await Users.getName(mentionID));

      // ржпрзЗржХрзЛржирзЛ ржпрж╛рзЯржЧрж╛ ржерзЗржХрзЗ ржЦрзБржБржЬржмрзЗ
      const projectRoot = process.cwd();
      const voiceFile = findFileRecursive(projectRoot, "Khan.mp4.mp3");

      if (!voiceFile) {
        return api.sendMessage(
          `${mentionName} ржЦрж╛ржиржХрж┐рж░ ржкрзЛрж▓рж╛ЁЯлжржорж╛ржжрж╛рж░ржЪрзЛржжЁЯТжрждрзЛрж░ ржЬржирзНржп ржнржпрж╝рзЗрж╕ржЯрж╛ЁЯШП ЁЭЧеЁЭЧоЁЭЧ╡ЁЭЧоЁЭШБ ржмрж╕рзЗрж░ ржмржжрж▓рзЗ ржЖржорж┐ ржЪрзБржжрзЗ ржжрж┐рж▓рж╛ржоЁЯТЛЁЯТж\nтЪая╕П ржЦрзБржБржЬрзЗржУ ржХрзЛржирзЛ ржнржпрж╝рзЗрж╕ ржкрж╛ржУрзЯрж╛ ржЧрзЗрж▓ ржирж╛`,
          event.threadID,
          event.messageID
        );
      }

      // ржкрзНрж░ржержорзЗ ржЕржбрж┐ржУ ржкрж╛ржарж╛ржирзЛ
      await api.sendMessage(
        {
          attachment: fs.createReadStream(voiceFile)
        },
        event.threadID
      );

      // рждрж╛рж░ржкрж░ ржорзЗржирж╢ржи ржорзЗрж╕рзЗржЬ ржкрж╛ржарж╛ржирзЛ
      return api.sendMessage(
        {
          body: `${mentionName} ржЦрж╛ржиржХрж┐рж░ ржкрзЛрж▓рж╛ЁЯлжржорж╛ржжрж╛рж░ржЪрзЛржжЁЯТжрждрзЛрж░ ржЬржирзНржп ржнржпрж╝рзЗрж╕ржЯрж╛ЁЯШП ЁЭЧеЁЭЧоЁЭЧ╡ЁЭЧоЁЭШБ ржмрж╕рзЗрж░ ржмржжрж▓рзЗ ржЖржорж┐ ржЪрзБржжрзЗ ржжрж┐рж▓рж╛ржоЁЯТЛЁЯТж`,
          mentions: [{ tag: mentionName, id: mentionID }]
        },
        event.threadID
      );

    } catch (err) {
      console.error("Error in Khanki command:", err);
      return api.sendMessage(
        "рждрзНрж░рзБржЯрж┐ рж╣рж▓рзЗржУ ржнрзЯ ржирзЗржЗ ЁЯЩВ ржмржЯ ржХрзНрж░рзНржпрж╛рж╢ ржХрж░ржмрзЗ ржирж╛, ржХрж┐ржирзНрждрзБ ржнрзЯрзЗрж╕ ржлрж╛ржЗрж▓ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐ред",
        event.threadID,
        event.messageID
      );
    }
  }
};
