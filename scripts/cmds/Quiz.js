const axios = require("axios");

module.exports = {
  config: {
    name: "quiz",
    version: "2.0",
    author: "Akash √ó ChatGPT",
    countDown: 5,
    role: 0,
    shortDescription: "Play quiz and earn coins",
    longDescription: "Bangla quiz system. Correct = earn coins, Wrong = lose coins.",
    category: "game",
    guide: "{p}quiz"
  },

  onStart: async function ({ api, event, args, usersData }) {
    const { threadID, senderID, messageID } = event;

    const userData = await usersData.get(senderID);
    if (userData.money < 30) {
      return api.sendMessage("‚ùå ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶õ‡ßá ‡¶™‡¶∞‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶§ ‡¶ï‡ßü‡ßá‡¶® ‡¶®‡ßá‡¶á (‡¶ï‡¶Æ‡¶™‡¶ï‡ßç‡¶∑‡ßá 30 ‡¶ï‡ßü‡ßá‡¶® ‡¶≤‡¶æ‡¶ó‡¶¨‡ßá)‡•§", threadID, messageID);
    }

    if (args[0]?.toLowerCase() === "h") {
      return api.sendMessage(
        `üß† Quiz Guide:\n\n` +
        `‚û§ ‡¶ñ‡ßá‡¶≤‡¶§‡ßá ‡¶ñ‡¶∞‡¶ö ‡¶π‡¶¨‡ßá: -30 ‡¶ï‡ßü‡ßá‡¶®\n` +
        `‚û§ ‡¶∏‡¶†‡¶ø‡¶ï ‡¶â‡¶§‡ßç‡¶§‡¶∞: +1000 ‡¶ï‡ßü‡ßá‡¶®\n` +
        `‚û§ ‡¶≠‡ßÅ‡¶≤ ‡¶â‡¶§‡ßç‡¶§‡¶∞: -50 ‡¶ï‡ßü‡ßá‡¶®\n` +
        `‚û§ ‡¶∏‡¶Æ‡ßü: 20 ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶°`,
        threadID, messageID
      );
    }

    try {
      const res = await axios.get(`https://rubish-apihub.onrender.com/rubish/quiz-api?category=Bangla&apikey=rubish69`);
      const data = res.data;
      if (!data.question || !data.answer) throw new Error("Invalid quiz data");

      // -30 ‡¶ï‡ßü‡ßá‡¶® ‡¶ï‡ßá‡¶ü‡ßá ‡¶®‡ßá‡¶ì‡ßü‡¶æ
      await usersData.set(senderID, {
        money: userData.money - 30,
        exp: userData.exp,
        data: userData.data
      });

      const formatted = 
`‚ï≠‚îÄ‚îÄ‚ú¶ ${data.question}
‚îú‚Ä£ ùóî) ${data.A}
‚îú‚Ä£ ùóï) ${data.B}
‚îú‚Ä£ ùóñ) ${data.C}
‚îú‚Ä£ ùóó) ${data.D}
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚Ä£ Reply with A/B/C/D (‚è∞ 20s)`;

      return api.sendMessage(formatted, threadID, async (err, info) => {
        if (err) return;

        const timeout = setTimeout(async () => {
          const index = global.GoatBot.onReply.findIndex(e => e.messageID === info.messageID);
          if (index !== -1) {
            api.sendMessage(`‚è∞ ‡¶∏‡¶Æ‡ßü ‡¶∂‡ßá‡¶∑!\n‚úÖ ‡¶∏‡¶†‡¶ø‡¶ï ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶õ‡¶ø‡¶≤: ${data.answer}`, threadID);
            global.GoatBot.onReply.splice(index, 1);
          }
        }, 20000);

        global.GoatBot.onReply.push({
          commandName: this.config.name,
          messageID: info.messageID,
          author: senderID,
          correct: data.answer,
          timeout
        });
      });

    } catch (err) {
      return api.sendMessage("‚ùå ‡¶ï‡ßÅ‡¶á‡¶ú ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•!", threadID, messageID);
    }
  },

  onReply: async function ({ api, event, Reply, usersData }) {
    const { senderID, messageID, threadID, body } = event;
    if (senderID !== Reply.author) return;

    const answer = body.trim().toUpperCase();
    if (!["A", "B", "C", "D"].includes(answer)) {
      return api.sendMessage("‚ö†Ô∏è ‡¶∂‡ßÅ‡¶ß‡ßÅ A/B/C/D ‡¶≤‡¶ø‡¶ñ‡ßã", threadID, messageID);
    }

    clearTimeout(Reply.timeout);
    const userData = await usersData.get(senderID);

    if (answer === Reply.correct) {
      await usersData.set(senderID, { 
        money: userData.money + 1000, 
        exp: userData.exp, 
        data: userData.data 
      });
      return api.sendMessage(`‚úÖ ‡¶∏‡¶†‡¶ø‡¶ï ‡¶â‡¶§‡ßç‡¶§‡¶∞!\nüí∞ +1000 ‡¶ï‡ßü‡ßá‡¶®\nüìå ‡¶®‡¶§‡ßÅ‡¶® Balance: ${userData.money + 1000}`, threadID, messageID);
    } else {
      const newMoney = Math.max(userData.money - 50, 0);
      await usersData.set(senderID, { 
        money: newMoney, 
        exp: userData.exp, 
        data: userData.data 
      });
      return api.sendMessage(`‚ùå ‡¶≠‡ßÅ‡¶≤ ‡¶â‡¶§‡ßç‡¶§‡¶∞!\n‚úÖ ‡¶∏‡¶†‡¶ø‡¶ï: ${Reply.correct}\nüí∏ -50 ‡¶ï‡ßü‡ßá‡¶®\nüìå ‡¶®‡¶§‡ßÅ‡¶® Balance: ${newMoney}`, threadID, messageID);
    }
  }
};
